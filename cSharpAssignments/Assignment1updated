using System;
using System.Collections.Generic;
using System.Reflection;

public static class ObjectValidator
{
    public static bool Validate<T>(T obj, out List<string> errors)
    {
        errors = new List<string>();

        
        PropertyInfo[] properties = typeof(T).GetProperties();

        foreach (var property in properties)
        {
            
            if (property.GetCustomAttribute(typeof(RequiredAttribute)) != null)
            {
                var value = property.GetValue(obj);
                if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
                {
                    errors.Add($"{property.Name} is required.");
                }
            }

            
            if (property.GetCustomAttribute(typeof(RangeAttribute)) != null)
            {
                var rangeAttribute = (RangeAttribute)property.GetCustomAttribute(typeof(RangeAttribute));
                var value = (int)property.GetValue(obj);
                if (value < rangeAttribute.Minimum || value > rangeAttribute.Maximum)
                {
                    errors.Add($"{property.Name} must be within the range {rangeAttribute.Minimum}-{rangeAttribute.Maximum}.");
                }
            }

            
            if (property.GetCustomAttribute(typeof(MaxLengthAttribute)) != null)
            {
                var maxLengthAttribute = (MaxLengthAttribute)property.GetCustomAttribute(typeof(MaxLengthAttribute));
                var value = property.GetValue(obj) as string;
                if (value != null && value.Length > maxLengthAttribute.MaxLength)
                {
                    errors.Add($"{property.Name} must have a maximum length of {maxLengthAttribute.MaxLength} characters.");
                }
            }
        }

        return errors.Count == 0;
    }
}

[AttributeUsage(AttributeTargets.Property)]
public class RequiredAttribute : Attribute
{
}

[AttributeUsage(AttributeTargets.Property)]
public class RangeAttribute : Attribute
{
    public int Minimum { get; }
    public int Maximum { get; }
    public string ErrorMessage { get; }

    public RangeAttribute(int minimum, int maximum, string errorMessage)
    {
        Minimum = minimum;
        Maximum = maximum;
        ErrorMessage = errorMessage;
    }
}

[AttributeUsage(AttributeTargets.Property)]
public class MaxLengthAttribute : Attribute
{
    public int MaxLength { get; }
    public string ErrorMessage { get; }

    public MaxLengthAttribute(int maxLength, string errorMessage)
    {
        MaxLength = maxLength;
        ErrorMessage = errorMessage;
    }
}

class Device
{
    [Required(ErrorMessage = "ID Property Requires Value")]
    public string Id { get; set; }

    [Range(10, 100, "Code Value Must Be Within 10-100")]
    public int Code { get; set; }

    [MaxLength(100, "Max of 100 Charcters are allowed")]
    public string Description { get; set; }
}

class Program
{
    static void Main()
    {
        Device deviceObj = new Device();
        deviceObj.Id = "31027INT";
        deviceObj.Code = 5;
        deviceObj.Description = "Good toy to play with";
        List<string> errors;
        bool isValid = ObjectValidator.Validate(deviceObj, out errors);

        if (!isValid)
        {
            foreach (string item in errors)
            {
                Console.WriteLine(item);
            }
        }
        else
        {

            Console.WriteLine("All Perfect!");
        }
    }
}
